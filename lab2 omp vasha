#include <thread>
#include <iostream>
#include <string>
#include <ctime>
#include <omp.h> 

using namespace std;

const double e = 0.01;
const int n = 4;

void threadfunction(int a, int b, double** A, double* x, double* xnew, double* f)
{
	for (int i = a; i < b; i++) {
		xnew[i] = f[i];
		for (int j = 0;j < n;j++) {
			xnew[i] += A[i][j] * x[j];
			//std::cout << xnew[i];
		}
	}
}
int main()
{

    double** A;
	double f[n];
	A = new double* [n];
	for (int i = 0; i < n; i++)
		A[i] = new double[n];

	double x[n];
	double xnew[n];
	srand(time(0));
	A[0][0]=0;
	A[0][1]=-0.2;
	A[0][2]=0.1;
	A[0][3]=0;
	A[1][0]=-0.33;
	A[1][1]=0;
	A[1][2]=-0.17;
	A[1][3]=0;
	A[2][0]=-0.0833;
	A[2][1]=0.25;
	A[2][2]=0;
	A[2][3]=1;
	A[3][0]=0;
	A[3][1]=0;
	A[3][2]=0;
	A[3][3]=1;
	f[0]=0.5;
	f[1]=-4.07;
	f[2]=3;
	f[3]=0;
//x1=1.64, x2=-4.89, x3=1.64, x4=0
	for (int i = 0; i < n; i++) {
		x[i] = f[i];
	}
	
	int w = 0, h = 0;
	unsigned int start_time = clock();
	while (w < 30) {
#pragma omp parallel num_threads(4)
		{
			int p = omp_get_thread_num();
			double start = omp_get_wtime();
			int a = 1 * p;
			int b = 1 * (p + 1);
			threadfunction(a, b, A, x, xnew, f);
			double end = omp_get_wtime();
		}
		h = 0;
		for (int i = 0; i < n; i++) {
			if (abs(xnew[i] - x[i]) >= e)
				h++;
		}
		for (int i = 0; i < n; i++) {
			x[i] = xnew[i];
			cout<<x[i]<<" ";
		}
		cout<<endl;
		if (h == 0) {
			std::cout << " Достигнута искомая точность решения";
			break;
		}
		w++;
	}

	unsigned int end_time = clock();
	unsigned int search_time = end_time - start_time;
	//std::cout << "\n time = " << search_time << endl;

	return 0;
}
